[metadata]
name = gflownet
description = GFlowNet related training and environment code
url = https://github.com/recursionpharma/gflownet
author = Recursion Pharmaceuticals
author_email = devs@recursionpharma.com
classifiers =
	Operating System :: OS Independent
	Programming Language :: Python
	Programming Language :: Python :: 3
keywords = gflownet
license = MIT

[options]
python_requires > = 3.6

[flake8]
max-line-length = 120
exclude = build, tests, conda.recipe, benchmarks, .asv, .git, venv, migrations/versions, .tox
max-complexity = 20


[mypy]
python_version = 3.8
ignore_missing_imports = True
plugins = pydantic.mypy
exclude = (requirements|venv)
show_error_codes = True

# Strict mode; enables the following flags: --warn-unused-configs, --disallow-any-generics, --disallow-subclassing-any, --disallow-untyped-
# calls, --disallow-untyped-defs, --disallow-incomplete-defs, --check-untyped-defs, --disallow-untyped-decorators, --no-implicit-optional,
# --warn-redundant-casts, --warn-unused-ignores, --warn-return-any, --no-implicit-reexport, --strict-equality
strict = True

# We enable strict mode, then disable the specific strict-mode sub-checks we know fail.
# This makes disabled checks more explicit.
# Ideally we could ratchet up the code quality over time and remove these.
allow_any_generics = True
allow_untyped_calls = True
allow_untyped_defs = True
allow_incomplete_defs = True

# I think implicit_reexport and allow_redefinition should generally be allowed.
# No implicit reexport would mean imports are treated as private unless aliased
implicit_reexport = True
# Redefinition allows unconditional variable redefinition with a new type
allow_redefinition = True

[mypy-tests.*]
# overrides for the tests/ directory
# untyped test functions are OK
allow_untyped_defs = True
# incompletely-typed test functions are OK
allow_incomplete_defs = True
